class Node:
    def __init__(self,val):
        self.val=val
        self.next=None
        
class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.head=None
        self.tail=None
        self.size=0
    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        if self.head!=None:
            if index<self.size and index>=0:
                curr=self.head
                count=0
                while count<index:
                    curr=curr.next
                    count+=1
                return curr.val
            
        return -1
        
        
        
        

    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        self.size+=1
        newNode=Node(val)
        if self.head is None:
            self.head=newNode
            self.head.next=None
            self.tail=self.head
        
        else:
            newNode.next=self.head
            self.head=newNode
       

       
    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        
        newNode=Node(val)
        if self.head is None:
            self.addAtHead(val)
        else:
            self.tail.next=newNode
            self.tail=newNode
            self.size+=1
     

        
            
            
        
    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        if index<=self.size and index>=0:
            curr=self.head
            count=1
            if index==0:
                self.addAtHead(val)
            elif index==self.size:
                self.addAtTail(val)
            else:
                prev=self.head
                curr=self.head.next
                while count<index:
                    prev=curr
                    curr=curr.next
                    count+=1
                newNode=Node(val)    
                prev.next=newNode
                newNode.next=curr
                self.size+=1
     

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if self.head!=None:
            if index<self.size and index>=0:
                count=1
                if index==0:
                    self.head=self.head.next
                else:
                    prev=self.head
                    curr=self.head.next
                    while count<index:
                        prev=curr
                        curr=curr.next
                        count+=1
                    prev.next=curr.next 
                    if index==(self.size-1):
                        self.tail=prev
                self.size-=1
      

        
       
   
                
